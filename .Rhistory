# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
stat_result <- full_join(actresult,permutation_result)
stat_result
#
comp_data
# Set the number of reps
n_reps <- 10000
permutation_result <- tibble()
for (i in unique(comp_data$species)){
# Create a vector to store the results
samp_dist <- rep(0,n_reps)
selected_data <- comp_data[which(comp_data$species == i),]
for (j in 1:n_reps){
# Perform t-test on new permuted group data
permuted_t_test_results <- selected_data %>% mutate(treatment = treatment[sample(row_number())]) %>%
t.test(activity ~ treatment, data = .)
# Store the result data for each randomization
samp_dist[j] <-permuted_t_test_results$statistic
}
t_value <- comp_data[which(comp_data$species == i),] %>% t.test(activity ~ treatment, data = .) %>% .$statistic
permutation_pvalue <- permuted_t_test_results$p.value
permutation_result <- rbind(permutation_result, tibble(species = i,P_value = permutation_pvalue))
# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
#
comp_data
# Set the number of reps
n_reps <- 1000
permutation_result <- tibble()
for (i in unique(comp_data$species)){
# Create a vector to store the results
samp_dist <- rep(0,n_reps)
selected_data <- comp_data[which(comp_data$species == i),]
for (j in 1:n_reps){
# Perform t-test on new permuted group data
permuted_t_test_results <- selected_data %>% mutate(treatment = treatment[sample(row_number())]) %>%
t.test(activity ~ treatment, data = .)
# Store the result data for each randomization
samp_dist[j] <-permuted_t_test_results$statistic
}
t_value <- comp_data[which(comp_data$species == i),] %>% t.test(activity ~ treatment, data = .) %>% .$statistic
permutation_pvalue <- permuted_t_test_results$p.value
permutation_result <- rbind(permutation_result, tibble(species = i,P_value = permutation_pvalue))
# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
plot_tibble
fig
stat_result <- full_join(actresult,permutation_result)
stat_result
#
comp_data
# Set the number of reps
n_reps <- 10000
permutation_result <- tibble()
for (i in unique(comp_data$species)){
# Create a vector to store the results
samp_dist <- rep(0,n_reps)
selected_data <- comp_data[which(comp_data$species == i),]
for (j in 1:n_reps){
# Perform t-test on new permuted group data
permuted_t_test_results <- selected_data %>% mutate(treatment = treatment[sample(row_number())]) %>%
t.test(activity ~ treatment, data = .)
# Store the result data for each randomization
samp_dist[j] <-permuted_t_test_results$statistic
}
t_value <- comp_data[which(comp_data$species == i),] %>% t.test(activity ~ treatment, data = .) %>% .$statistic
permutation_pvalue <- permuted_t_test_results$p.value
permutation_result <- rbind(permutation_result, tibble(species = i,P_value = permutation_pvalue))
# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
plot_tibble
fig
stat_result <- full_join(actresult,permutation_result)
stat_result
ggsave(ggsave("./output/figs.png",fig))
#
comp_data
# Set the number of reps
n_reps <- 10000
permutation_result <- tibble()
for (i in unique(comp_data$species)){
# Create a vector to store the results
samp_dist <- rep(0,n_reps)
selected_data <- comp_data[which(comp_data$species == i),]
for (j in 1:n_reps){
# Perform t-test on new permuted group data
permuted_t_test_results <- selected_data %>% mutate(treatment = treatment[sample(row_number())]) %>%
t.test(activity ~ treatment, data = .)
# Store the result data for each randomization
samp_dist[j] <-permuted_t_test_results$statistic
}
t_value <- comp_data[which(comp_data$species == i),] %>% t.test(activity ~ treatment, data = .) %>% .$statistic
permutation_pvalue <- permuted_t_test_results$p.value
permutation_result <- rbind(permutation_result, tibble(species = i,P_value = permutation_pvalue))
# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
View(stat_result)
plot_tibble
fig
stat_result <- full_join(actresult,permutation_result)
stat_result
#
comp_data
# Set the number of reps
n_reps <- 1000
permutation_result <- tibble()
for (i in unique(comp_data$species)){
# Create a vector to store the results
samp_dist <- rep(0,n_reps)
selected_data <- comp_data[which(comp_data$species == i),]
for (j in 1:n_reps){
# Perform t-test on new permuted group data
permuted_t_test_results <- selected_data %>% mutate(treatment = treatment[sample(row_number())]) %>%
t.test(activity ~ treatment, data = .)
# Store the result data for each randomization
samp_dist[j] <-permuted_t_test_results$statistic
}
t_value <- comp_data[which(comp_data$species == i),] %>% t.test(activity ~ treatment, data = .) %>% .$statistic
permutation_pvalue <- permuted_t_test_results$p.value
permutation_result <- rbind(permutation_result, tibble(species = i,P_value = permutation_pvalue))
# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
plot_tibble
fig
stat_result <- full_join(actresult,permutation_result)
stat_result
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
# install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
## Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
library(tidyverse)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
comp_data <-  data %>% select(-...1)%>% drop_na()
comp_data
# Drop irrelevant columns
Sp_Tr <- comp_data %>% select(-c(comment,loc,animal_id,size))
Sp_Tr
# Check spelling in species and treatment but also generate a summary table
unique(Sp_Tr$species)
unique(Sp_Tr$treatment)
summary(Sp_Tr)
# Use flextable to render the summary table in a tidy format
use_df_printer()
set_flextable_defaults(
theme_fun = theme_booktabs,
big.mark = " ",
font.color = "#666666",
border.color = "#666666",
padding = 3,
)
# Create a summary of the original dataset.
dat <- Sp_Tr |>
group_by(treatment,species) |>
summarise(n=n(),
across(
where(is.numeric),
.fns = list(
avg = ~ mean(.x, na.rm = TRUE),
se = ~ sd(.x, na.rm = TRUE)/sqrt(n)
)
),.groups = "drop" ) |>  subset(select=-c(n_avg,n_se))
dat
fdata <-  as_tibble(dat)
# Use flextable to render the summary table
ft <-  fdata|>
flextable() |>
separate_header() |>
autofit() |>
theme_booktabs(bold_header = TRUE) |>
footnote(i = 1, j=4,
part = "header",
ref_symbols = " ",
value = as_paragraph("sl: Standard length of the fish in mm")) |>
footnote(i = 2, j = grep("avg", colnames(fdata), value = TRUE),
part = "header",
ref_symbols = " ",
value = as_paragraph("avg: Arithmetic Mean")) |>
footnote(i = 2, j = grep("se", colnames(fdata), value = TRUE),
part = "header",
ref_symbols = " ", value = as_paragraph("se: Standard Error")) |>
align(align = "center", part = "all", j = 4:7) |>
merge_v(j = 1) |>
valign(j = 1, valign = "top") |>
colformat_double(digits = 2)
ft
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
fig1 <- comp_data %>% ggplot(aes(x = treatment, y = activity, fill = treatment)) +
geom_violin(trim = F) +
facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
fig1
pathf <- "./data/pics/20220908160026.png"
fig <- readPNG(pathf)
figs <- comp_data %>% ggplot(aes(x = treatment, y = activity, fill = treatment)) +
annotation_raster(fig,-Inf, Inf, 60, Inf)+
geom_violin(trim = F) +
facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
figs
# Use ggsave to save the figure
ggsave("./output/figures/figs.png",figs)
## Write your answer here
# I will not see any changes under the specified path in *GitHub Desktop*, so they will not be uploaded to GitHub either.
## Add your answer here
# When I added the `pics/` folder to my working directory, I drew a picture of each fish on the fig. I didn't want to keep track of the files in the pic/ folder on GitHub, even though they are .png files. Because it is not important that these pictures change, everyone can choose which pictures of each fish they like. A record of the changes to these pictures is not necessary. It would instead take up a lot of space.
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
comp_data %>% filter(species == c("chromis","lemon","acantho")) %>% ggplot(aes(x = treatment, y = activity, fill = treatment)) +
geom_violin(trim = F) +facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
pathf <- "./data/pics/20220908210851.png"
fig <- readPNG(pathf)
figs <- comp_data %>%  filter(species==c("chromis","lemon","acantho"))%>%
ggplot(aes(x = treatment, y = activity, fill = treatment)) +
annotation_raster(fig,-Inf, Inf, 60, Inf)+
geom_violin(trim = F) +
facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
figs
# load dplyr and rstatix R package
library(dplyr)
library(rstatix)
# Run some statistical tests to determine for each species
slresult= Sp_Tr %>%
group_by(species) %>%
t_test(sl ~ treatment,detailed = TRUE)
actresult= Sp_Tr %>%
group_by(species) %>%
t_test(activity ~ treatment,detailed = TRUE)
# output result
result <- rbind(slresult,actresult)|>
convert_as_factor(.y., species)
result
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
table1 <- result|>
convert_as_factor(.y., species) |>
as_grouped_data(groups = c(".y."))|>
flextable() |>
separate_header() |>
autofit() |>
theme_booktabs(bold_header = TRUE) |>
align(align = "center", part = "all", j = 1:16) |>
merge_v(j = 1) |>
valign(j = 1, valign = "top") |>
colformat_double(digits = 2)|>
autofit()
table1
#
comp_data
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
# install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
## Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
library(tidyverse)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
comp_data <-  data %>% select(-...1)%>% drop_na()
comp_data
# Drop irrelevant columns
Sp_Tr <- comp_data %>% select(-c(comment,loc,animal_id,size))
Sp_Tr
# Check spelling in species and treatment but also generate a summary table
unique(Sp_Tr$species)
unique(Sp_Tr$treatment)
summary(Sp_Tr)
# Use flextable to render the summary table in a tidy format
use_df_printer()
set_flextable_defaults(
theme_fun = theme_booktabs,
big.mark = " ",
font.color = "#666666",
border.color = "#666666",
padding = 3,
)
# Create a summary of the original dataset.
dat <- Sp_Tr |>
group_by(treatment,species) |>
summarise(n=n(),
across(
where(is.numeric),
.fns = list(
avg = ~ mean(.x, na.rm = TRUE),
se = ~ sd(.x, na.rm = TRUE)/sqrt(n)
)
),.groups = "drop" ) |>  subset(select=-c(n_avg,n_se))
dat
fdata <-  as_tibble(dat)
# Use flextable to render the summary table
ft <-  fdata|>
flextable() |>
separate_header() |>
autofit() |>
theme_booktabs(bold_header = TRUE) |>
footnote(i = 1, j=4,
part = "header",
ref_symbols = " ",
value = as_paragraph("sl: Standard length of the fish in mm")) |>
footnote(i = 2, j = grep("avg", colnames(fdata), value = TRUE),
part = "header",
ref_symbols = " ",
value = as_paragraph("avg: Arithmetic Mean")) |>
footnote(i = 2, j = grep("se", colnames(fdata), value = TRUE),
part = "header",
ref_symbols = " ", value = as_paragraph("se: Standard Error")) |>
align(align = "center", part = "all", j = 4:7) |>
merge_v(j = 1) |>
valign(j = 1, valign = "top") |>
colformat_double(digits = 2)
ft
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
fig1 <- comp_data %>% ggplot(aes(x = treatment, y = activity, fill = treatment)) +
geom_violin(trim = F) +
facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
fig1
pathf <- "./data/pics/20220908160026.png"
fig <- readPNG(pathf)
figs <- comp_data %>% ggplot(aes(x = treatment, y = activity, fill = treatment)) +
annotation_raster(fig,-Inf, Inf, 60, Inf)+
geom_violin(trim = F) +
facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
figs
# Use ggsave to save the figure
ggsave("./output/figures/figs.png",figs)
## Write your answer here
# I will not see any changes under the specified path in *GitHub Desktop*, so they will not be uploaded to GitHub either.
## Add your answer here
# When I added the `pics/` folder to my working directory, I drew a picture of each fish on the fig. I didn't want to keep track of the files in the pic/ folder on GitHub, even though they are .png files. Because it is not important that these pictures change, everyone can choose which pictures of each fish they like. A record of the changes to these pictures is not necessary. It would instead take up a lot of space.
# You want to make changes to your collaborators figure in Task 5. Maybe you want to create a figure that focuses only on three fish species instead of the 5. More specifically, chromis, lemon, and acantho. Add code here to revise their figure to do that.
comp_data %>% filter(species == c("chromis","lemon","acantho")) %>% ggplot(aes(x = treatment, y = activity, fill = treatment)) +
geom_violin(trim = F) +facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
pathf <- "./data/pics/20220908210851.png"
fig <- readPNG(pathf)
figs <- comp_data %>%  filter(species==c("chromis","lemon","acantho"))%>%
ggplot(aes(x = treatment, y = activity, fill = treatment)) +
annotation_raster(fig,-Inf, Inf, 60, Inf)+
geom_violin(trim = F) +
facet_wrap(~species)+
geom_boxplot(width = 0.45)+
geom_jitter(aes(colour = treatment),size = 0.9,width=0.1,height=0)+
theme_bw(base_size = 14)+ theme_bw(base_size = 12)+
xlab('Species') + ylab('Activity (s)')+
ggtitle("Box line plot of activity distribution for each species")+
scale_fill_manual(values = c("#FCC7C3","#97E3AD","#BED7FF"))
figs
# load dplyr and rstatix R package
library(dplyr)
library(rstatix)
# Run some statistical tests to determine for each species
slresult= Sp_Tr %>%
group_by(species) %>%
t_test(sl ~ treatment,detailed = TRUE)
actresult= Sp_Tr %>%
group_by(species) %>%
t_test(activity ~ treatment,detailed = TRUE)
# output result
result <- rbind(slresult,actresult)|>
convert_as_factor(.y., species)
result
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
table1 <- result|>
convert_as_factor(.y., species) |>
as_grouped_data(groups = c(".y."))|>
flextable() |>
separate_header() |>
autofit() |>
theme_booktabs(bold_header = TRUE) |>
align(align = "center", part = "all", j = 1:16) |>
merge_v(j = 1) |>
valign(j = 1, valign = "top") |>
colformat_double(digits = 2)|>
autofit()
table1
#
comp_data
# Set the number of reps
n_reps <- 1000
permutation_result <- tibble()
for (i in unique(comp_data$species)){
# Create a vector to store the results
samp_dist <- rep(0,n_reps)
selected_data <- comp_data[which(comp_data$species == i),]
for (j in 1:n_reps){
# Perform t-test on new permuted group data
permuted_t_test_results <- selected_data %>% mutate(treatment = treatment[sample(row_number())]) %>%
t.test(activity ~ treatment, data = .)
# Store the result data for each randomization
samp_dist[j] <-permuted_t_test_results$statistic
}
t_value <- comp_data[which(comp_data$species == i),] %>% t.test(activity ~ treatment, data = .) %>% .$statistic
permutation_pvalue <- permuted_t_test_results$p.value
permutation_result <- rbind(permutation_result, tibble(species = i,P_value = permutation_pvalue))
# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
plot_tibble
fig
permutation_result
stat_result <- full_join(actresult,permutation_result)
stat_result
#
comp_data
# Set the number of reps
n_reps <- 1000
permutation_result <- tibble()
for (i in unique(comp_data$species)){
# Create a vector to store the results
samp_dist <- rep(0,n_reps)
selected_data <- comp_data[which(comp_data$species == i),]
for (j in 1:n_reps){
# Perform t-test on new permuted group data
permuted_t_test_results <- selected_data %>% mutate(treatment = treatment[sample(row_number())]) %>%
t.test(activity ~ treatment, data = .)
# Store the result data for each randomization
samp_dist[j] <-permuted_t_test_results$statistic
}
t_value <- comp_data[which(comp_data$species == i),] %>% t.test(activity ~ treatment, data = .) %>% .$statistic
permutation_pvalue <- permuted_t_test_results$p.value
permutation_result <- rbind(permutation_result, tibble(species = i,P_value = permutation_pvalue))
# Of the 10,000 (n_reps) random t-statistics generated from the sampling distribution that meet the null hypothesis, identify values that are more extreme than those calculated for our original data and store logical (TRUE/FALSE) results  in tibble
plot_tibble <- tibble(value = samp_dist,extreme = (abs(samp_dist) > abs(t_value)))
# Create a histogram in ggplot
fig <- ggplot(plot_tibble,aes(x=value,fill=extreme))+geom_histogram(bins=200)
}
plot_tibble
fig
permutation_result
stat_result <- full_join(actresult,permutation_result)
stat_result
